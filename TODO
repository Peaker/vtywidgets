* Placable r = (RequestedSize, Size -> r)
* Display arg = Placable (arg -> TermImage)
* Widget arg k = Placable (arg -> (TermImage, Keymap k))

* Various "make" widget funcs:
  * Move various params that the SizeRange doesn't depend on to be imgarg

* Scroll:
  * To support scrolling with pos history, need to be able to use the
    child widget keymap to get the child's new widget...
  * How to clean up the code?

* FocusDelegator:

* Widget can also have an "entry" function that returns the same "k"
  that lets it move to where it was entered from?
  * Maybe replace Keymap with Eventmap and replace ModKey with
    EventKey, and have other possible events?
  * Then "direction-entry/direction-exit" could be another event the
    widget is allowed to handle
  * Then mouse events could be sent too...

* Currently, I'd need to heuristic diff on TextEdit changes to know
  what it changed... Maybe create a composable Diff that can describe
  changes accurately?

* makeWidget should Clip the subwidget images:

  Image.clip :: Monoid a => IntersectRect -> Endo (Image a)

  mempty for any out-of-intersection position, to not break the
  guarantee that nothing is outside the clip rect of the image

* Grid

  * Instead of Grid neutralizing non-current children -- they should
    do so themselves, based on HasFocus

    * This way, all widgets can implement "global" bindings that do
      whatever they want

    * No ugly clearing of the keymap and image cursor of grid children

* Trace entries: How to do IO to read the entries?
  * Can have the keymap export the IO action to generate the model
